rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ===================================================================
    // HELPER FUNCTIONS - Using Custom Claims (Secure)
    // ===================================================================
    
    // Check if user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }
    
    // Get user ID from auth context
    function getUserId() {
      return request.auth.uid;
    }
    
    // Check if user is admin via CUSTOM CLAIMS (not Firestore)
    // This is SECURE because custom claims are in the JWT token
    function isAdmin() {
      return isSignedIn() && 
             (request.auth.token.admin == true || 
              request.auth.token.superAdmin == true);
    }
    
    // Check if user is super admin via CUSTOM CLAIMS
    function isSuperAdmin() {
      return isSignedIn() && request.auth.token.superAdmin == true;
    }
    
    // Check if user owns the document
    function isOwner(userId) {
      return isSignedIn() && getUserId() == userId;
    }
    
    // ===================================================================
    // USERS COLLECTION
    // ===================================================================
    match /users/{userId} {
      // Read: Users can read their own document, admins can read any
      allow read: if isOwner(userId) || isAdmin();
      
      // Create: Users can create their own document BUT cannot set role fields
      allow create: if isOwner(userId) && 
                       !request.resource.data.keys().hasAny([
                         'role', 'isAdmin', 'isSuperAdmin', 
                         'lastRoleUpdate', 'updatedBy'
                       ]);
      
      // Update: Users can update their own document BUT cannot modify role fields
      allow update: if isOwner(userId) && 
                       !request.resource.data.diff(resource.data).affectedKeys()
                         .hasAny(['role', 'isAdmin', 'isSuperAdmin', 
                                  'lastRoleUpdate', 'updatedBy']);
      
      // Delete: Only admins can delete users
      allow delete: if isAdmin();
      
      // Shops subcollection
      match /shops/{shopId} {
        allow read: if isOwner(userId) || isAdmin();
        allow write: if isOwner(userId) || isAdmin();
      }
    }
    
    // ===================================================================
    // SHOPIFY STATES (OAuth Flow)
    // ===================================================================
    match /shopify_states/{stateId} {
      allow read, write: if isSignedIn();
    }
    
    // ===================================================================
    // SHOPS COLLECTION (if you have a top-level shops collection)
    // ===================================================================
    match /shops/{shopId} {
      allow read: if isSignedIn() && 
                     (resource.data.userId == getUserId() || isAdmin());
      allow create: if isSignedIn();
      allow update: if isSignedIn() && 
                       (resource.data.userId == getUserId() || isAdmin());
      allow delete: if isAdmin();
    }
    
    // ===================================================================
    // ORDERS COLLECTION
    // ===================================================================
    match /orders/{orderId} {
      allow read: if isSignedIn() && isAdmin();
      allow create: if false; // Only via backend
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // ===================================================================
    // INVOICES COLLECTION
    // ===================================================================
    match /invoices/{invoiceId} {
      allow read: if isSignedIn() && 
                     (resource.data.userId == getUserId() || isAdmin());
      allow write: if false; // Only via backend
    }
    
    // ===================================================================
    // AFFILIATE STATS COLLECTION
    // ===================================================================
    match /affiliate_stats/{statId} {
      allow read: if isSignedIn() && 
                     (resource.data.userId == getUserId() || isAdmin());
      allow write: if false; // Only via backend
    }
    
    // ===================================================================
    // ADMIN LOGS COLLECTION
    // ===================================================================
    match /admin_logs/{logId} {
      allow read: if isAdmin();
      allow write: if false; // Only via backend
    }
    
    // ===================================================================
    // DEFAULT DENY - Important for security!
    // ===================================================================
    match /{document=**} {
      allow read, write: if false;
    }
  }
}